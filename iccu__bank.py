# -*- coding: utf-8 -*-
"""iccu _bank.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/17S1GPAlZQzhixfTEn4_4ZE-_DihNtA_6
"""

import streamlit as st

# Set page configuration for ICCU Bank theme
st.set_page_config(page_title="ICCU Bank Financial Calculators", page_icon="ðŸ’¼", layout="centered")

# Apply custom CSS for red, white, and black theme
st.markdown(
    """
    <style>
    .main {
        background-color: #ffffff;
        color: #000000;
    }
    .stButton > button {
        color: #ffffff;
        background-color: #ff0000;
        border-color: #ff0000;
    }
    .stTextInput, .stNumberInput, .stSlider {
        border-color: #ff0000;
    }
    </style>
    """,
    unsafe_allow_html=True
)

# Title and navigation
st.title("ICCU Bank Financial Calculators")
st.write("Plan your financial future with ICCU Bank's comprehensive calculators.")

# Sidebar for navigation
st.sidebar.title("Navigate")
calculator_type = st.sidebar.radio("Choose a Calculator", ["Retirement", "Loan", "Savings"])

if calculator_type == "Retirement":
    st.header("Retirement Calculator")

    # User inputs for the retirement calculator
    current_age = st.number_input("Current Age", min_value=18, max_value=100, value=35)
    retirement_age = st.number_input("Retirement Age", min_value=current_age, max_value=100, value=65)
    current_savings = st.number_input("Current Savings ($)", min_value=0, value=50000)
    annual_income = st.number_input("Annual Income ($)", min_value=0, value=80000)
    savings_rate = st.slider("Expected Annual Savings Rate (%)", min_value=0, max_value=100, value=15)
    annual_return = st.slider("Expected Annual Return on Investments (%)", min_value=0.0, max_value=20.0, value=6.0)
    inflation_rate = st.slider("Expected Inflation Rate (%)", min_value=0.0, max_value=10.0, value=2.0)
    desired_retirement_income = st.number_input("Desired Annual Retirement Income ($)", min_value=0, value=60000)
    years_in_retirement = st.number_input("Years in Retirement", min_value=1, max_value=50, value=25)
    social_security_income = st.number_input("Social Security or Pension Income ($)", min_value=0, value=20000)

    # Convert percentage inputs to decimals for calculations
    savings_rate /= 100
    annual_return /= 100
    inflation_rate /= 100

    # Retirement calculations
    years_until_retirement = retirement_age - current_age
    annual_savings = annual_income * savings_rate
    fv_current_savings = current_savings * ((1 + annual_return) ** years_until_retirement)
    fv_annual_contributions = annual_savings * (((1 + annual_return) ** years_until_retirement - 1) / annual_return)
    total_retirement_savings = fv_current_savings + fv_annual_contributions
    future_retirement_income = desired_retirement_income * ((1 + inflation_rate) ** years_until_retirement)
    annual_return_after_inflation = annual_return - inflation_rate
    required_fund = (future_retirement_income - social_security_income) / annual_return_after_inflation * \
        (1 - (1 / ((1 + annual_return_after_inflation) ** years_in_retirement)))
    shortfall_or_surplus = total_retirement_savings - required_fund

    # Display retirement results
    st.subheader("Retirement Results")
    st.write(f"Projected Savings at Retirement Age: ${total_retirement_savings:,.2f}")
    st.write(f"Required Retirement Fund: ${required_fund:,.2f}")
    if shortfall_or_surplus < 0:
        st.write(f"**You have a shortfall of: ${-shortfall_or_surplus:,.2f}. Consider increasing your savings rate or adjusting your retirement age or income expectations.**")
    else:
        st.write(f"**You have a surplus of: ${shortfall_or_surplus:,.2f}. You are on track for retirement!**")

elif calculator_type == "Loan":
    st.header("Loan Calculator")

    # User inputs for the loan calculator
    loan_amount = st.number_input("Loan Amount ($)", min_value=0, value=10000)
    annual_interest_rate = st.slider("Annual Interest Rate (%)", min_value=0.0, max_value=30.0, value=5.0)
    loan_term_years = st.number_input("Loan Term (Years)", min_value=1, max_value=30, value=10)

    # Convert percentage inputs to decimals for calculations
    monthly_interest_rate = (annual_interest_rate / 100) / 12
    total_payments = loan_term_years * 12

    # Loan calculation (monthly payment)
    if monthly_interest_rate > 0:
        monthly_payment = loan_amount * (monthly_interest_rate * (1 + monthly_interest_rate) ** total_payments) / ((1 + monthly_interest_rate) ** total_payments - 1)
    else:
        monthly_payment = loan_amount / total_payments

    total_cost_of_loan = monthly_payment * total_payments

    # Display loan results
    st.subheader("Loan Results")
    st.write(f"Monthly Payment: ${monthly_payment:,.2f}")
    st.write(f"Total Cost of the Loan: ${total_cost_of_loan:,.2f}")

elif calculator_type == "Savings":
    st.header("Savings Calculator")

    # User inputs for the savings calculator
    initial_deposit = st.number_input("Initial Deposit ($)", min_value=0, value=1000)
    monthly_contribution = st.number_input("Monthly Contribution ($)", min_value=0, value=100)
    savings_annual_return = st.slider("Annual Return Rate (%)", min_value=0.0, max_value=20.0, value=5.0)
    savings_years = st.number_input("Years to Save", min_value=1, max_value=50, value=10)
    compounding_method = st.radio("Compounding Method", ["Fixed", "Compound", "Continuous"])

    # Convert percentage inputs to decimals for calculations
    savings_annual_return /= 100
    total_months = savings_years * 12

    if compounding_method == "Fixed":
        # Fixed savings calculation (simple interest)
        future_value_savings = initial_deposit + (monthly_contribution * total_months) + \
                               (initial_deposit + monthly_contribution * total_months) * savings_annual_return * savings_years
    elif compounding_method == "Compound":
        # Compound savings calculation
        savings_monthly_return = savings_annual_return / 12
        future_value_savings = initial_deposit * ((1 + savings_monthly_return) ** total_months) + \
                               monthly_contribution * (((1 + savings_monthly_return) ** total_months - 1) / savings_monthly_return)
    elif compounding_method == "Continuous":
        # Continuous compounding calculation
        import numpy as np
        future_value_savings = (initial_deposit + monthly_contribution * total_months) * np.exp(savings_annual_return * savings_years)

    # Display savings results
    st.subheader("Savings Results")
    st.write(f"Future Value of Savings: ${future_value_savings:,.2f}")

# Thank you message
st.write("Thank you for using ICCU Bank's Financial Calculators. Plan wisely for a secure financial future!")

